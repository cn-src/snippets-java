/*
 * This file is generated by jOOQ.
 */
package cn.javaer.snippets.jooq;

import org.jetbrains.annotations.UnmodifiableView;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
public class TCity extends TableImpl<Record> implements TableMetaProvider<City, Integer, Void> {

    private static final long serialVersionUID = -484834304;

    private final Table<?> __table = DSL.table(getUnqualifiedName());
    private final List<Field<?>> __selectFields = Arrays.asList(this.ID, this.NAME);
    private final List<ColumnMeta<City, ?>> __columnMeta =
        Arrays.asList(new ColumnMeta((Function<City, String>) City::getName, this.NAME));
    private final ColumnMeta<City, Integer> __idMeta = new ColumnMeta<>(City::getId, this.ID);
    /**
     * The reference instance of <code>PUBLIC.CITY</code>
     */
    public static final TCity CITY = new TCity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>PUBLIC.CITY.ID</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("ID"),
        org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.CITY.NAME</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("NAME"),
        org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>PUBLIC.CITY</code> table reference
     */
    public TCity() {
        this(DSL.name("CITY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CITY</code> table reference
     */
    public TCity(String alias) {
        this(DSL.name(alias), CITY);
    }

    /**
     * Create an aliased <code>PUBLIC.CITY</code> table reference
     */
    public TCity(Name alias) {
        this(alias, CITY);
    }

    private TCity(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private TCity(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TCity(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CITY);
    }

    @Override
    public TCity as(String alias) {
        return new TCity(DSL.name(alias), this);
    }

    @Override
    public TCity as(Name alias) {
        return new TCity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCity rename(String name) {
        return new TCity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCity rename(Name name) {
        return new TCity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Table<?> getTable() {
        return this.__table;
    }

    @Override
    public Class getEntityClass() {
        return City.class;
    }

    @Override
    public Optional<ColumnMeta<City, Integer>> idGenerator() {
        return Optional.of(this.__idMeta);
    }

    @Override
    public Optional<ColumnMeta<City, Integer>> getId() {
        return Optional.of(this.__idMeta);
    }

    @Override
    public @UnmodifiableView List<Field<?>> selectFields() {
        return __selectFields;
    }

    @Override
    public @UnmodifiableView List<ColumnMeta<City, ?>> saveColumnMetas() {
        return this.__columnMeta;
    }
}
